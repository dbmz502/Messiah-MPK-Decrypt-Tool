use num_enum::TryFromPrimitive;

extern crate static_assertions as sa;

#[allow(non_camel_case_types, dead_code)]
#[derive(PartialEq, Debug, TryFromPrimitive)]
#[repr(u8)]
pub enum EPixelFormat {
    Unknown = 0,
    A32R32G32B32F = 1,
    A16B16G16R16F = 2,
    R8G8B8A8 = 3,
    B5G6R5,
    A8L8,
    G16R16,
    G16R16F,
    G32R32F,
    R32F,
    R16F,
    L8,
    L16,
    A8,
    FloatRGB,
    FloatRGBA,
    D24,
    D32,
    BC1,
    BC2,
    BC3,
    BC4,
    BC5,
    BC6H_SF,
    BC6H_UF,
    BC7,
    PVRTC2_RGB,
    PVRTC2_RGBA,
    PVRTC4_RGB,
    ETC1,
    ETC2_RGB,
    ETC2_RGBA,
    ATC_RGB,
    ATC_RGBA_E,
    ATC_RGBA_I,
    ASTC_4x4_LDR,
    ASTC_5x4_LDR,
    ASTC_5x5_LDR,
    ASTC_6x5_LDR,
    ASTC_6x6_LDR,
    ASTC_8x5_LDR,
    ASTC_8x6_LDR,
    ASTC_8x8_LDR,
    ASTC_10x5_LDR,
    ASTC_10x6_LDR,
    ASTC_10x8_LDR,
    ASTC_10x10_LDR,
    ASTC_12x10_LDR,
    ASTC_12x12_LDR,
    DepthStencil,
    ShadowDepth,
    ShadowDepth32,
    R10G10B10A2,
    R32U,
    R11G11B10F,
    ASTC_4x4_HDR,
    ASTC_5x4_HDR,
    ASTC_5x5_HDR,
    ASTC_6x5_HDR,
    ASTC_6x6_HDR,
    ASTC_8x5_HDR,
    ASTC_8x6_HDR,
    ASTC_8x8_HDR,
    ASTC_10x5_HDR,
    ASTC_10x6_HDR,
    ASTC_10x8_HDR,
    ASTC_10x10_HDR,
    ASTC_12x10_HDR,
    ASTC_12x12_HDR,
    A32R32G32B32UI,
}

sa::const_assert!(EPixelFormat::BC7 as u8 == 25);
